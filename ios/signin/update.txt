diff --git a/ios/signin/Podfile b/ios/signin/Podfile
index 614341c..d94c101 100644
--- a/ios/signin/Podfile
+++ b/ios/signin/Podfile
@@ -1,4 +1,6 @@
 use_frameworks!
+source 'sso://cpdc-internal/spec'
+source 'https://github.com/CocoaPods/Specs.git'
 platform :ios, '7.0'
 pod 'GoogleSignIn'
 
diff --git a/ios/signin/SignInExample.xcodeproj/project.pbxproj b/ios/signin/SignInExample.xcodeproj/project.pbxproj
index 1d4f142..40d417d 100644
--- a/ios/signin/SignInExample.xcodeproj/project.pbxproj
+++ b/ios/signin/SignInExample.xcodeproj/project.pbxproj
@@ -9,6 +9,8 @@
 /* Begin PBXBuildFile section */
 		1024C2F01C93009800945A88 /* SafariServices.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 1024C2EF1C93009800945A88 /* SafariServices.framework */; };
 		1024C2F11C9300A500945A88 /* SafariServices.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 1024C2EF1C93009800945A88 /* SafariServices.framework */; };
+		107B073A2301D944002C9260 /* GoogleService-Info.plist in Resources */ = {isa = PBXBuildFile; fileRef = 107B07392301D944002C9260 /* GoogleService-Info.plist */; };
+		107B073B2301D944002C9260 /* GoogleService-Info.plist in Resources */ = {isa = PBXBuildFile; fileRef = 107B07392301D944002C9260 /* GoogleService-Info.plist */; };
 		10A034B81E039F1900A667F0 /* SignInExampleTests.m in Sources */ = {isa = PBXBuildFile; fileRef = 10A034B71E039F1900A667F0 /* SignInExampleTests.m */; };
 		4B0CAF401ACF72EB006FC636 /* GoogleSignIn.bundle in Resources */ = {isa = PBXBuildFile; fileRef = 4B0CAF3F1ACF72EB006FC636 /* GoogleSignIn.bundle */; };
 		4B3329241AE04F9500327B83 /* GoogleSignIn.bundle in Resources */ = {isa = PBXBuildFile; fileRef = 4B0CAF3F1ACF72EB006FC636 /* GoogleSignIn.bundle */; };
@@ -52,6 +54,7 @@
 
 /* Begin PBXFileReference section */
 		1024C2EF1C93009800945A88 /* SafariServices.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = SafariServices.framework; path = System/Library/Frameworks/SafariServices.framework; sourceTree = SDKROOT; };
+		107B07392301D944002C9260 /* GoogleService-Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; path = "GoogleService-Info.plist"; sourceTree = "<group>"; };
 		10A034B51E039F1900A667F0 /* SignInExampleTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = SignInExampleTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
 		10A034B71E039F1900A667F0 /* SignInExampleTests.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = SignInExampleTests.m; sourceTree = "<group>"; };
 		10A034B91E039F1900A667F0 /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
@@ -148,6 +151,7 @@
 		4BC032D51ACF33B70092326A = {
 			isa = PBXGroup;
 			children = (
+				107B07392301D944002C9260 /* GoogleService-Info.plist */,
 				EF8983C51C0D13FD003619BB /* Default-568h@2x.png */,
 				4B0CAF3F1ACF72EB006FC636 /* GoogleSignIn.bundle */,
 				4BC032E01ACF33B70092326A /* SignInExample */,
@@ -156,6 +160,7 @@
 				10A034B61E039F1900A667F0 /* SignInExampleTests */,
 				4BC032DF1ACF33B70092326A /* Products */,
 				E27D599993EDB54E213FA076 /* Frameworks */,
+				72A0AD6FEF1A09A1A7F1472D /* Pods */,
 			);
 			sourceTree = "<group>";
 		};
@@ -192,6 +197,13 @@
 			name = "Supporting Files";
 			sourceTree = "<group>";
 		};
+		72A0AD6FEF1A09A1A7F1472D /* Pods */ = {
+			isa = PBXGroup;
+			children = (
+			);
+			path = Pods;
+			sourceTree = "<group>";
+		};
 		E27D599993EDB54E213FA076 /* Frameworks */ = {
 			isa = PBXGroup;
 			children = (
@@ -301,6 +313,7 @@
 			developmentRegion = English;
 			hasScannedForEncodings = 0;
 			knownRegions = (
+				English,
 				en,
 				Base,
 			);
@@ -334,6 +347,7 @@
 				EF6EAC321B0A771900227264 /* appbg.png in Resources */,
 				4B3329241AE04F9500327B83 /* GoogleSignIn.bundle in Resources */,
 				EF8983C61C0D13FD003619BB /* Default-568h@2x.png in Resources */,
+				107B073B2301D944002C9260 /* GoogleService-Info.plist in Resources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -346,6 +360,7 @@
 				EF6EAC2B1B0A738400227264 /* Images.xcassets in Resources */,
 				EF6EAC2C1B0A738400227264 /* LaunchScreen.xib in Resources */,
 				4BC032ED1ACF33B70092326A /* Main.storyboard in Resources */,
+				107B073A2301D944002C9260 /* GoogleService-Info.plist in Resources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -456,7 +471,7 @@
 				SDKROOT = iphoneos;
 				SWIFT_OBJC_BRIDGING_HEADER = "";
 				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
-				SWIFT_VERSION = 3.0;
+				SWIFT_VERSION = 5.0;
 				VALID_ARCHS = "armv7 armv7s arm64";
 			};
 			name = Debug;
@@ -479,7 +494,7 @@
 				PRODUCT_NAME = "$(TARGET_NAME)";
 				SDKROOT = iphoneos;
 				SWIFT_OBJC_BRIDGING_HEADER = "";
-				SWIFT_VERSION = 3.0;
+				SWIFT_VERSION = 5.0;
 				VALID_ARCHS = "armv7 armv7s arm64";
 			};
 			name = Release;
@@ -610,6 +625,7 @@
 				10A034BD1E039F1900A667F0 /* Release */,
 			);
 			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
 		};
 		4B97B2721AD7145E0036DD6C /* Build configuration list for PBXNativeTarget "SignInExampleSwift" */ = {
 			isa = XCConfigurationList;
diff --git a/ios/signin/SignInExample/AppDelegate.m b/ios/signin/SignInExample/AppDelegate.m
index 8dc4a90..9432556 100644
--- a/ios/signin/SignInExample/AppDelegate.m
+++ b/ios/signin/SignInExample/AppDelegate.m
@@ -22,21 +22,27 @@
 - (BOOL)application:(UIApplication *)application
 didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
 
-  [GIDSignIn sharedInstance].clientID = @"YOUR_CLIENT_ID";
+  [GIDSignIn sharedInstance].clientID = @"489500461815-65km82vore0muvfam168n63p9480jnpj.apps.googleusercontent.com";
   [GIDSignIn sharedInstance].delegate = self;
 
   return YES;
 }
 // [END didfinishlaunching]
 
+// [START openurl_new]
+- (BOOL)application:(UIApplication *)app
+            openURL:(NSURL *)url
+            options:(NSDictionary<NSString *, id> *)options {
+  return [[GIDSignIn sharedInstance] handleURL:url];
+}
+// [END openurl_new]
+
 // [START openurl]
 - (BOOL)application:(UIApplication *)application
             openURL:(NSURL *)url
   sourceApplication:(NSString *)sourceApplication
          annotation:(id)annotation {
-  return [[GIDSignIn sharedInstance] handleURL:url
-                             sourceApplication:sourceApplication
-                                    annotation:annotation];
+  return [[GIDSignIn sharedInstance] handleURL:url];
 }
 // [END openurl]
 
@@ -44,6 +50,20 @@ didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
 - (void)signIn:(GIDSignIn *)signIn
 didSignInForUser:(GIDGoogleUser *)user
      withError:(NSError *)error {
+  if (error != nil) {
+    if (error.code == kGIDSignInErrorCodeHasNoAuthInKeychain) {
+      NSLog(@"The user has not signed in before or they have since signed out.");
+    } else {
+      NSLog(@"%@", error.localizedDescription);
+    }
+    // [START_EXCLUDE silent]
+    [[NSNotificationCenter defaultCenter]
+     postNotificationName:@"ToggleAuthUINotification"
+     object:nil
+     userInfo:nil];
+    // [END_EXCLUDE]
+    return;
+  }
   // Perform any operations on signed in user here.
   NSString *userId = user.userID;                  // For client-side use only!
   NSString *idToken = user.authentication.idToken; // Safe to send to the server
diff --git a/ios/signin/SignInExample/Info.plist b/ios/signin/SignInExample/Info.plist
index 28c58f8..69b07fd 100644
--- a/ios/signin/SignInExample/Info.plist
+++ b/ios/signin/SignInExample/Info.plist
@@ -27,7 +27,7 @@
 			<string>google</string>
 			<key>CFBundleURLSchemes</key>
 			<array>
-				<string>YOUR_REVERSED_CLIENT_ID</string>
+				<string>com.googleusercontent.apps.489500461815-65km82vore0muvfam168n63p9480jnpj</string>
 			</array>
 		</dict>
 	</array>
diff --git a/ios/signin/SignInExample/ViewController.h b/ios/signin/SignInExample/ViewController.h
index 6b17257..db6703c 100644
--- a/ios/signin/SignInExample/ViewController.h
+++ b/ios/signin/SignInExample/ViewController.h
@@ -18,7 +18,7 @@
 @import GoogleSignIn;
 
 // [START viewcontroller_interfaces]
-@interface ViewController : UIViewController <GIDSignInUIDelegate>
+@interface ViewController : UIViewController
 // [END viewcontroller_interfaces]
 
 // [START viewcontroller_vars]
diff --git a/ios/signin/SignInExample/ViewController.m b/ios/signin/SignInExample/ViewController.m
index 444f850..1d5d65c 100644
--- a/ios/signin/SignInExample/ViewController.m
+++ b/ios/signin/SignInExample/ViewController.m
@@ -21,12 +21,11 @@
 - (void)viewDidLoad {
   [super viewDidLoad];
 
-  // TODO(developer) Configure the sign-in button look/feel
+  [GIDSignIn sharedInstance].presentingViewController = self;
 
-  [GIDSignIn sharedInstance].uiDelegate = self;
+  // Automatically sign in the user.
+  [[GIDSignIn sharedInstance] restorePreviousSignIn];
 
-  // Uncomment to automatically sign in the user.
-  //[[GIDSignIn sharedInstance] signInSilently];
   // [START_EXCLUDE silent]
   [[NSNotificationCenter defaultCenter]
       addObserver:self
diff --git a/ios/signin/SignInExampleSwift/AppDelegate.swift b/ios/signin/SignInExampleSwift/AppDelegate.swift
index f6a6d0d..11f3731 100644
--- a/ios/signin/SignInExampleSwift/AppDelegate.swift
+++ b/ios/signin/SignInExampleSwift/AppDelegate.swift
@@ -20,74 +20,75 @@ import GoogleSignIn
 // [START appdelegate_interfaces]
 class AppDelegate: UIResponder, UIApplicationDelegate, GIDSignInDelegate {
 
-// [END appdelegate_interfaces]
+  // [END appdelegate_interfaces]
   var window: UIWindow?
 
   // [START didfinishlaunching]
   func application(_ application: UIApplication,
-    didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
-      // Initialize sign-in
-      GIDSignIn.sharedInstance().clientID = "YOUR_CLIENT_ID"
-      GIDSignIn.sharedInstance().delegate = self
+                   didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
+    // Initialize sign-in
+    GIDSignIn.sharedInstance().clientID = "489500461815-65km82vore0muvfam168n63p9480jnpj.apps.googleusercontent.com"
+    GIDSignIn.sharedInstance().delegate = self
 
-      return true
+    return true
   }
   // [END didfinishlaunching]
 
   // [START openurl]
   func application(_ application: UIApplication,
-    open url: URL, sourceApplication: String?, annotation: Any) -> Bool {
-      return GIDSignIn.sharedInstance().handle(url,
-          sourceApplication: sourceApplication,
-          annotation: annotation)
+                   open url: URL, sourceApplication: String?, annotation: Any) -> Bool {
+    return GIDSignIn.sharedInstance().handle(url)
   }
   // [END openurl]
 
+  // [START openurl_new]
   @available(iOS 9.0, *)
-  func application(_ app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey : Any]) -> Bool {
-    return GIDSignIn.sharedInstance().handle(url,
-      sourceApplication: options[UIApplicationOpenURLOptionsKey.sourceApplication] as? String,
-      annotation: options[UIApplicationOpenURLOptionsKey.annotation])
+  func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any]) -> Bool {
+    return GIDSignIn.sharedInstance().handle(url)
   }
+  // [END openurl_new]
 
   // [START signin_handler]
   func sign(_ signIn: GIDSignIn!, didSignInFor user: GIDGoogleUser!,
-    withError error: Error!) {
-      if let error = error {
-        print("\(error.localizedDescription)")
-        // [START_EXCLUDE silent]
-        NotificationCenter.default.post(
-          name: Notification.Name(rawValue: "ToggleAuthUINotification"), object: nil, userInfo: nil)
-        // [END_EXCLUDE]
+            withError error: Error!) {
+    if let error = error {
+      if (error as NSError).code == GIDSignInErrorCode.hasNoAuthInKeychain.rawValue {
+        print("The user has not signed in before or they have since signed out.")
       } else {
-        // Perform any operations on signed in user here.
-        let userId = user.userID                  // For client-side use only!
-        let idToken = user.authentication.idToken // Safe to send to the server
-        let fullName = user.profile.name
-        let givenName = user.profile.givenName
-        let familyName = user.profile.familyName
-        let email = user.profile.email
-        // [START_EXCLUDE]
-        NotificationCenter.default.post(
-          name: Notification.Name(rawValue: "ToggleAuthUINotification"),
-          object: nil,
-          userInfo: ["statusText": "Signed in user:\n\(fullName)"])
-        // [END_EXCLUDE]
+        print("\(error.localizedDescription)")
       }
+      // [START_EXCLUDE silent]
+      NotificationCenter.default.post(
+        name: Notification.Name(rawValue: "ToggleAuthUINotification"), object: nil, userInfo: nil)
+      // [END_EXCLUDE]
+      return
+    }
+    // Perform any operations on signed in user here.
+    let userId = user.userID                  // For client-side use only!
+    let idToken = user.authentication.idToken // Safe to send to the server
+    let fullName = user.profile.name
+    let givenName = user.profile.givenName
+    let familyName = user.profile.familyName
+    let email = user.profile.email
+    // [START_EXCLUDE]
+    NotificationCenter.default.post(
+      name: Notification.Name(rawValue: "ToggleAuthUINotification"),
+      object: nil,
+      userInfo: ["statusText": "Signed in user:\n\(fullName!)"])
+    // [END_EXCLUDE]
   }
   // [END signin_handler]
 
   // [START disconnect_handler]
   func sign(_ signIn: GIDSignIn!, didDisconnectWith user: GIDGoogleUser!,
-    withError error: Error!) {
-      // Perform any operations when the user disconnects from app here.
-      // [START_EXCLUDE]
-      NotificationCenter.default.post(
-          name: Notification.Name(rawValue: "ToggleAuthUINotification"),
-          object: nil,
-          userInfo: ["statusText": "User has disconnected."])
-      // [END_EXCLUDE]
+            withError error: Error!) {
+    // Perform any operations when the user disconnects from app here.
+    // [START_EXCLUDE]
+    NotificationCenter.default.post(
+      name: Notification.Name(rawValue: "ToggleAuthUINotification"),
+      object: nil,
+      userInfo: ["statusText": "User has disconnected."])
+    // [END_EXCLUDE]
   }
   // [END disconnect_handler]
-
 }
diff --git a/ios/signin/SignInExampleSwift/ViewController.swift b/ios/signin/SignInExampleSwift/ViewController.swift
index 1211141..285509d 100644
--- a/ios/signin/SignInExampleSwift/ViewController.swift
+++ b/ios/signin/SignInExampleSwift/ViewController.swift
@@ -19,7 +19,7 @@ import GoogleSignIn
 // Match the ObjC symbol name inside Main.storyboard.
 @objc(ViewController)
 // [START viewcontroller_interfaces]
-class ViewController: UIViewController, GIDSignInUIDelegate {
+class ViewController: UIViewController {
 // [END viewcontroller_interfaces]
 
   // [START viewcontroller_vars]
@@ -33,12 +33,11 @@ class ViewController: UIViewController, GIDSignInUIDelegate {
   override func viewDidLoad() {
     super.viewDidLoad()
 
-    GIDSignIn.sharedInstance().uiDelegate = self
+    GIDSignIn.sharedInstance()?.presentingViewController = self
 
-    // Uncomment to automatically sign in the user.
-    //GIDSignIn.sharedInstance().signInSilently()
+    // Automatically sign in the user.
+    GIDSignIn.sharedInstance()?.restorePreviousSignIn()
 
-    // TODO(developer) Configure the sign-in button look/feel
     // [START_EXCLUDE]
     NotificationCenter.default.addObserver(self,
         selector: #selector(ViewController.receiveToggleAuthUINotification(_:)),
@@ -72,7 +71,7 @@ class ViewController: UIViewController, GIDSignInUIDelegate {
 
   // [START toggle_auth]
   func toggleAuthUI() {
-    if GIDSignIn.sharedInstance().hasAuthInKeychain() {
+    if let _ = GIDSignIn.sharedInstance()?.currentUser?.authentication {
       // Signed in
       signInButton.isHidden = true
       signOutButton.isHidden = false
